# Packages for analysis
import pandas as pd
import numpy as np
from sklearn import svm

# Packages for visuals
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(font_scale=1.2)

# Allows charts to appear in the notebook
%matplotlib inline

# Pickle package
import pickle

test = pd.read_csv('Training_Data.csv')
test
print (test)

# Plot two ingredients
sns.lmplot('emg1', 'emg2', data=test,
           palette='Set1', fit_reg=False, scatter_kws={"s": 5});
           
# Specify inputs for the model
# ingredients = recipes[['Flour', 'Milk', 'Sugar', 'Butter', 'Egg', 'Baking Powder', 'Vanilla', 'Salt']].as_matrix()
ingredients = test[['emg1','emg2']].as_matrix()
type_label = np.where(test['Class1']== 'Index', 0, 1)
type_label1 = np.where(test['Class2']== 'Up', 0, 1)
# Feature names
recipe_features = test.columns.values[1:].tolist()
recipe_features

# Fit the SVM model
model = svm.SVC(kernel='linear', C=1)

# Get the separating hyperplane
w = model.coef_[0]
a = -w[0] / w[1]
xx = np.linspace(0, 3)
yy = a * xx - (model.intercept_[0]) / w[1]

# Plot the parallels to the separating hyperplane that pass through the support vectors
b = model.support_vectors_[0]
yy_down = a * xx + (b[1] - a * b[0])
b = model.support_vectors_[-1]
yy_up = a * xx + (b[1] - a * -b[0])

# Plot the hyperplane
sns.lmplot('emg1', 'emg2', data=test, hue='Class2', palette='Set1', fit_reg=False, scatter_kws={"s": 1})

# Look at the margins and support vectors
sns.lmplot('emg1', 'emg2', data=test, hue='Class2', palette='Set1', fit_reg=False, scatter_kws={"s": 1})
plt.plot(xx, yy, linewidth=2, color='black')
plt.plot(xx, yy_down, 'k--')
plt.plot(xx, yy_up, 'k--')
plt.scatter(model.support_vectors_[:, 0], model.support_vectors_[:, 1],
            s=0.5, facecolors='none');

# Plot the point to visually see where the point lies
sns.lmplot('emg1', 'emg2', data=test, hue='Class2', palette='Set1', fit_reg=False, scatter_kws={"s": 1})
plt.plot(xx, yy, linewidth=2, color='black')
plt.plot(1, 'yo', markersize='3');

# Create a function to guess when a recipe is a muffin or a cupcake
def index_or_pinky(emg1, emg2):
    model.fit(ingredients, type_label1)
    if(model.predict([[emg1, emg2]]))==0:
        print('Up')
    else:
        print('Down')
